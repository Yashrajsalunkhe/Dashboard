generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========= ENUMS =========
enum Role {
  ADMIN
  STAFF
  DENTIST
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  CONSULTATION
  SURGERY
  FOLLOW_UP
  CLEANING
  XRAY
}

enum PaymentMethod {
  CASH
  UPI
  CARD
  RAZORPAY
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

//  ========= APPLICATION MODELS =========

model User {
  id            String    @id // This ID will come from Supabase Auth
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STAFF)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  doctor          Doctor?       // A user with role DENTIST will have one Doctor profile
  createdPatients Patient[]
  createdBills    Bill[]
  createdAppointments Appointment[]
}

model Doctor {
  id              String   @id @default(cuid())
  phone           String?
  availableDays   String[] // e.g., ["MONDAY", "WEDNESDAY"]
  availableTime   String?  // e.g., "10:00-18:00"
  experienceYears Int?
  education       String?
  createdAt       DateTime @default(now())

  // One-to-one relation with a User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // A doctor has many appointments and bills
  appointments Appointment[]
  bills        Bill[]
}

model Patient {
  id             String   @id @default(cuid())
  name           String
  age            Int
  gender         String
  contact        String
  address        String?
  medicalHistory String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Who created this patient record
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // A patient can have many appointments and bills
  appointments Appointment[]
  bills        Bill[]
}

model Appointment {
  id              String            @id @default(cuid())
  date            DateTime
  time            String
  status          AppointmentStatus @default(SCHEDULED)
  appointmentType AppointmentType
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String

  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId String

  // Who booked this appointment
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  reminders Reminder[]
  bill      Bill?
}

model Bill {
  id                String        @id @default(cuid())
  amount            Float
  method            PaymentMethod @default(RAZORPAY)
  status            PaymentStatus @default(PENDING)
  razorpayPaymentId String?       @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String

  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId String

  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?      @unique

  // Who created this bill
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

model Reminder {
  id            String      @id @default(cuid())
  type          String // "EMAIL" or "WHATSAPP"
  status        String      @default("PENDING") // PENDING, SENT, FAILED
  sentAt        DateTime?
  createdAt     DateTime    @default(now())

  // Relation to the appointment
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
}
